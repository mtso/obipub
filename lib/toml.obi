fun split(source, needle) {
    needleLen := strlen(needle);
    len := strlen(source);
    start := 0;
    end := 0;
    pieces := [];
    pieceIdx := 0;

    i := 0; while() { i < len - needleLen + 1; } {
        potential := strslice(source, i, i + needleLen);
        match (potential == needle) {
            true -> {
                pieces.(pieceIdx) = strslice(source, start, end);
                pieceIdx = pieceIdx + 1;
                start = i + needleLen; // skip over found
                end = start;
                i = i + needleLen - 1;
            }
            false -> end = end + 1;
        };
        i = i + 1;
    };

    pieces.(pieceIdx) = strslice(source, start, len);
    return pieces;
}

fun each(list, f) {
    result := [];
    listlen := len(list);
    i := 0; while() { i < listlen; } {
        result.(i) = f(list.(i));
        i = i + 1;
    };
    return result;
}

fun set_table(obj, path, value) {
    match (len(path)) {
        0 -> return;
        _ -> ();
    };
    i := 0;
    _ref := obj;
    while() { path.(i + 1) != nil; } {
        match _ref.(path.(i)) {
            nil -> _ref.(path.(i)) = [];
            _ -> ();
        };
        _ref = _ref.(path.(i));
        i = i + 1;
    };
    _ref.(path.(i)) = value;
}

fun get_table(obj, path) {
    match (len(path)) {
        0 -> return;
        _ -> ();
    };
    i := 0;
    _ref := obj;
    while() { path.(i + 1) != nil; } {
        match _ref.(path.(i)) {
            nil -> _ref.(path.(i)) = [];
            _ -> ();
        };
        _ref = _ref.(path.(i));
        i = i + 1;
    };
    return _ref.(path.(i));
}

fun cutLeft(hay, needle) {
    i := 0;
    haylen := strlen(hay);
    start := -1;
    while() { i < haylen and start == -1; } {
        match strslice(hay, i, i + 1) == needle {
            true -> start = i;
            _ -> ();
        };
        i = i + 1;
    };
    return strslice(hay, start + 1, haylen);
}

fun cutRight(hay, needle) {
    haylen := strlen(hay);
    i := haylen;
    end := haylen + 1;
    while() { i >= 0 and end == haylen + 1; } {
        match strslice(hay, i - 1, i) == needle {
            true -> end = i;
            _ -> ();
        };
        i = i - 1;
    };
    return strslice(hay, 0, end - 1);
}

pub fun trim(s) {
    start := 0;
    startI := nil;
    end := strlen(s);
    endI := nil;
    while() { start < end and startI == nil; } {
        match strslice(s, start, start + 1) == " " {
            true -> start = start + 1;
            false -> startI = start;
        };
    };
    while() { end > start and endI == nil; } {
        match strslice(s, end - 1, end) == " " {
            true -> end = end - 1;
            false -> endI = end;
        };
    };
    return strslice(s, startI, endI);
}

pub fun parse_toml(contents) {
    root := [];
    current := root;
    lines := split(contents, "\n");
    each(lines) fun(line) {
        match strslice(trim(line), 0, 1) == "[" {
            true -> {
                dottedPath := cutLeft(cutRight(line, "]"), "[");
                path := split(dottedPath, ".");
                set_table(root, path, []);
                current = get_table(root, path);
                return;
            }
            _ -> ();
        };

        pieces := split(line, "=");
        match len(pieces) <= 1 {
            true -> return;
            _ -> ();
        };

        key := trim(pieces.(0));
        val := trim(cutLeft(line, "="));
        current.(key) = val;
    };
    return root;
}
